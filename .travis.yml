# This Travis job script has been generated by a script via
#
#   make_travis_yml_2.hs 'MoodleGrader.cabal'
#
# For more information, see https://github.com/hvr/multi-ghc-travis
#
language: c
sudo: false

git:
  submodules: false  # whether to recursively clone submodules

cache:
  directories:
    - $HOME/.ghc
    - $HOME/.cabal/packages
    - $HOME/.cabal/store
    - $HOME/.stack

before_cache:
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/build-reports.log
  # remove files that are regenerated by 'cabal update'
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/00-index.*
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/*.json
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/01-index.cache
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/01-index.tar
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/01-index.tar.idx

matrix:
  include:
  - compiler: "ghc-7.10.3"
    env: BUILD=cabal GHCVER=7.10.3 TEST="--enable-tests --enable-coverage"
    # env: TEST=--disable-tests BENCH=--disable-benchmarks
    addons: {apt: {packages: [ghc-ppa-tools,cabal-install-head,ghc-7.10.3], sources: [hvr-ghc]}}
  - compiler: "ghc-8.0.1"
    env: BUILD=cabal GHCVER=8.0.1 TEST="--enable-tests --enable-coverage"
    # env: TEST=--disable-tests BENCH=--disable-benchmarks
    addons: {apt: {packages: [ghc-ppa-tools,cabal-install-head,ghc-8.0.1], sources: [hvr-ghc]}}
  - compiler: "ghc-8.0.2"
    env: BUILD=cabal GHCVER=8.0.2 TEST="--enable-tests --enable-coverage"
    # env: TEST=--disable-tests BENCH=--disable-benchmarks
    addons: {apt: {packages: [ghc-ppa-tools,cabal-install-head,ghc-8.0.2], sources: [hvr-ghc]}}
  - compiler: "ghc-8.2.1"
    env: BUILD=cabal GHCVER=8.2.1 TEST="--enable-tests --enable-coverage"
  # env: TEST=--disable-tests BENCH=--disable-benchmarks
    addons: {apt: {packages: [ghc-ppa-tools,cabal-install-head,ghc-8.2.1], sources: [hvr-ghc]}}

  # The Stack builds. We can pass in arbitrary Stack arguments via the ARGS
  # variable, such as using --stack-yaml to point to a different file.
  - compiler: ": #stack 6 (ghc 7.10.3)"
    env: BUILD=stack ARGS="--resolver lts-6"
    addons: {apt: {packages: [ghc-7.10.3], sources: [hvr-ghc]}}

  - compiler: ": #stack 7 (ghc 8.0.1)"
    env: BUILD=stack ARGS="--resolver lts-7"
    addons: {apt: {packages: [ghc-8.0.1], sources: [hvr-ghc]}}

  - compiler: ": #stack 8 (ghc 8.0.2)"
    env: BUILD=stack ARGS="--resolver lts-8"
    addons: {apt: {packages: [ghc-8.0.1], sources: [hvr-ghc]}}

  - compiler: ": #stack 9 (ghc 8.0.2)"
    env: BUILD=stack ARGS="--resolver lts-9"
    addons: {apt: {packages: [ghc-8.0.1], sources: [hvr-ghc]}}

  - compiler: ": #stack default"
    env: BUILD=stack ARGS=""
    addons: {apt: {packages: [libgmp-dev]}}

  - compiler: ": #stack nightly"
    env: BUILD=stack ARGS="--resolver nightly"
    addons: {apt: {packages: [libgmp-dev]}}

  # Build on OS X in addition to Linux
  - compiler: ": #stack 6 (ghc 7.10.3)"
    env: BUILD=stack ARGS="--resolver lts-6"
    os: osx

  - compiler: ": #stack 7 (ghc 8.0.1) osx"
    env: BUILD=stack ARGS="--resolver lts-7"
    os: osx

  - compiler: ": #stack 8 (ghc 8.0.2) osx"
    env: BUILD=stack ARGS="--resolver lts-8"
    os: osx

  - compiler: ": #stack 9 (ghc 8.0.2) osx"
    env: BUILD=stack ARGS="--resolver lts-9"
    os: osx

  - compiler: ": #stack default osx"
    env: BUILD=stack ARGS=""
    os: osx

  - compiler: ": #stack nightly osx"
    env: BUILD=stack ARGS="--resolver nightly"
    os: osx

  allow_failures:
  - env: BUILD=cabal GHCVER=8.2.1
  - env: BUILD=stack ARGS="--resolver nightly"
  - env: BUILD=cabal GHCVER=head

before_install:
 - HC=${CC}
 - HCPKG=${HC/ghc/ghc-pkg}
 - unset CC
 - PKGNAME='MoodleGrader'
 # Above is autogenerated
 # ======================

 # We want to always allow newer versions of packages when building on GHC HEAD
 - PATH=/opt/ghc/$GHCVER/bin:/opt/ghc-ppa-tools/bin:/opt/cabal/$CABALVER/bin:$HOME/.local/bin:.cabal-sandbox/bin:$PATH
 - CABALARGS=""
 - if [ "x$GHCVER" = "xhead" ]; then CABALARGS=--allow-newer; fi
 # Download and unpack the stack executable
 - mkdir -p ~/.local/bin
 - |
   if [ `uname` = "Darwin" ]
   then
     travis_retry curl --insecure -L https://www.stackage.org/stack/osx-x86_64 | tar xz --strip-components=1 --include '*/stack' -C ~/.local/bin
   else
     travis_retry curl -L https://www.stackage.org/stack/linux-x86_64 | tar xz --wildcards --strip-components=1 -C ~/.local/bin '*/stack'
   fi
   # Use the more reliable S3 mirror of Hackage
   mkdir -p $HOME/.cabal
   echo 'remote-repo: hackage.haskell.org:http://hackage.fpcomplete.com/' > $HOME/.cabal/config
   echo 'remote-repo-cache: $HOME/.cabal/packages' >> $HOME/.cabal/config

   if [ "$CABALVER" != "1.16" ]
   then
     echo 'jobs: $ncpus' >> $HOME/.cabal/config
   fi


install:
  - echo "$(ghc --version) [$(ghc --print-project-git-commit-id 2> /dev/null || echo '?')]"
  - if [ -f configure.ac ]; then autoreconf -i; fi
  - |
    set -ex
    case "$BUILD" in
     stack)
       ;;
     cabal)
       cabal --version
       travis_retry cabal update
       make cabal-all
       ;;
    esac
    set +ex

# Here starts the actual work to be performed for the package under test;
# any command which exits with a non-zero exit code causes the build to fail.
script:
 - |
   set -ex
   case "$BUILD" in
     stack)
       make ARGS="$ARGS" stack-test
       ;;
     cabal)
       make cabal-test
       ;;
   esac
   set +ex

# REGENDATA ["MoodleGrader.cabal"]
# EOF

after_script:
  - |
    set -ex
    case "$BUILD" in
      stack)
        stack --install-ghc install hpc-coveralls
        ;;
      cabal)
        cabal sandbox init && cabal install hpc-coveralls
        ;;
    esac
    set +ex
  - hpc-coveralls MoodleGrader-test
