# This Travis job script has been generated by a script via
#
#   make_travis_yml_2.hs 'MoodleGrader.cabal'
#
# For more information, see https://github.com/hvr/multi-ghc-travis
#
language: c
sudo: false

git:
  submodules: false  # whether to recursively clone submodules

cache:
  directories:
    - $HOME/.ghc
    - $HOME/.cabal/packages
    - $HOME/.cabal/store
    - $HOME/.stack

before_cache:
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/build-reports.log
  # remove files that are regenerated by 'cabal update'
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/00-index.*
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/*.json
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/01-index.cache
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/01-index.tar
  - rm -fv $HOME/.cabal/packages/hackage.haskell.org/01-index.tar.idx

matrix:
  include:
    - env: BUILD=cabal GHCVER=7.10.3
      compiler: "ghc-7.10.3"
    # env: TEST=--disable-tests BENCH=--disable-benchmarks
      addons: {apt: {packages: [ghc-ppa-tools,cabal-install-head,ghc-7.10.3], sources: [hvr-ghc]}}
    - env: BUILD=cabal GHCVER=8.0.1
      compiler: "ghc-8.0.1"
    # env: TEST=--disable-tests BENCH=--disable-benchmarks
      addons: {apt: {packages: [ghc-ppa-tools,cabal-install-head,ghc-8.0.1], sources: [hvr-ghc]}}
    - env: BUILD=cabal GHCVER=8.0.2
      compiler: "ghc-8.0.2"
    # env: TEST=--disable-tests BENCH=--disable-benchmarks
      addons: {apt: {packages: [ghc-ppa-tools,cabal-install-head,ghc-8.0.2], sources: [hvr-ghc]}}
    - env: BUILD=cabal GHCVER=8.2.1
      compiler: "ghc-8.2.1"
    # env: TEST=--disable-tests BENCH=--disable-benchmarks
      addons: {apt: {packages: [ghc-ppa-tools,cabal-install-head,ghc-8.2.1], sources: [hvr-ghc]}}

    # The Stack builds. We can pass in arbitrary Stack arguments via the ARGS
    # variable, such as using --stack-yaml to point to a different file.
    - env: BUILD=stack ARGS="--resolver lts-6"
      compiler: ": #stack 6 (ghc 7.10.3)"
      addons: {apt: {packages: [ghc-7.10.3], sources: [hvr-ghc]}}

    - env: BUILD=stack ARGS="--resolver lts-7"
      compiler: ": #stack 7 (ghc 8.0.1)"
      addons: {apt: {packages: [ghc-8.0.1], sources: [hvr-ghc]}}

    - env: BUILD=stack ARGS="" GHCVER
      compiler: ": #stack default"
      addons: {apt: {packages: [libgmp-dev]}}

    - env: BUILD=stack ARGS="--resolver nightly"
      compiler: ": #stack nightly"
      addons: {apt: {packages: [libgmp-dev]}}

    # Build on OS X in addition to Linux
    - env: BUILD=stack ARGS="--resolver lts-6"
      compiler: ": #stack 6 (ghc 7.10.3)"
      os: osx

    - env: BUILD=stack ARGS="--resolver lts-7"
      compiler: ": #stack 7 (ghc 8.0.1) osx"
      os: osx

    - env: BUILD=stack ARGS=""
      compiler: ": #stack default osx"
      os: osx

    - env: BUILD=stack ARGS="--resolver nightly"
      compiler: ": #stack nightly osx"
      os: osx

    allow_failures:
    - env: BUILD=stack ARGS="--resolver nightly"
    - env: BUILD=cabal GHCVER=head  CABALVER=head HAPPYVER=1.19.5 ALEXVER=3.1.7

before_install:
 - HC=${CC}
 - HCPKG=${HC/ghc/ghc-pkg}
 - unset CC
 - PKGNAME='MoodleGrader'
 # Above is autogenerated
 # ======================

 # We want to always allow newer versions of packages when building on GHC HEAD
 - PATH=/opt/ghc/$GHCVER/bin:/opt/ghc-ppa-tools/bin:/opt/cabal/$CABALVER/bin:$HOME/.local/bin:$PATH
 - CABALARGS=""
 - if [ "x$GHCVER" = "xhead" ]; then CABALARGS=--allow-newer; fi
 # Download and unpack the stack executable
 - mkdir -p ~/.local/bin
 - |
   if [ `uname` = "Darwin" ]
   then
     travis_retry curl --insecure -L https://www.stackage.org/stack/osx-x86_64 | tar xz --strip-components=1 --include '*/stack' -C ~/.local/bin
   else
     travis_retry curl -L https://www.stackage.org/stack/linux-x86_64 | tar xz --wildcards --strip-components=1 -C ~/.local/bin '*/stack'
   fi
   # Use the more reliable S3 mirror of Hackage
   mkdir -p $HOME/.cabal
   echo 'remote-repo: hackage.haskell.org:http://hackage.fpcomplete.com/' > $HOME/.cabal/config
   echo 'remote-repo-cache: $HOME/.cabal/packages' >> $HOME/.cabal/config

   if [ "$CABALVER" != "1.16" ]
   then
     echo 'jobs: $ncpus' >> $HOME/.cabal/config
   fi


install:

- echo "$(ghc --version) [$(ghc --print-project-git-commit-id 2> /dev/null || echo '?')]"
- if [ -f configure.ac ]; then autoreconf -i; fi
- |
  set -ex
  case "$BUILD" in
   stack)
     ;;
  cabal)
    cabal --version
    travis_retry cabal update
    #make cabal-all
    ;;
  esac
  set +ex
script:
- |
  set -ex
  case "$BUILD" in
    stack)
     - make ARGS="$ARGS" stack-test
      ;;
    cabal)
     make cabal-test
     - cabal --version
     - echo "$(${HC} --version) [$(${HC} --print-project-git-commit-id 2> /dev/null || echo '?')]"
     - BENCH=${BENCH---enable-benchmarks}
     - TEST=${TEST---enable-tests}
     - HADDOCK=${HADDOCK-true}
     - INSTALLED=${INSTALLED-true}
     - travis_retry cabal update -v
     - sed -i.bak 's/^jobs:/-- jobs:/' ${HOME}/.cabal/config
     - rm -fv cabal.project.local
     - "echo 'packages: .' > cabal.project"
     - rm -f cabal.project.freeze
     - cabal new-build -w ${HC} ${TEST} ${BENCH} --dep -j2 all
     - cabal new-build -w ${HC} --disable-tests --disable-benchmarks --dep -j2 all
     ;;
  esac
  set +ex

# Here starts the actual work to be performed for the package under test;
# any command which exits with a non-zero exit code causes the build to fail.
script:
 - if [ -f configure.ac ]; then autoreconf -i; fi
 - rm -rf .ghc.environment.* dist/
 - cabal sdist # test that a source-distribution can be generated
 - cd dist/
 - SRCTAR=(${PKGNAME}-*.tar.gz)
 - SRC_BASENAME="${SRCTAR/%.tar.gz}"
 - tar -xvf "./$SRC_BASENAME.tar.gz"
 - cd "$SRC_BASENAME/"
## from here on, CWD is inside the extracted source-tarball
 - rm -fv cabal.project.local
 - "echo 'packages: .' > cabal.project"
 # this builds all libraries and executables (without tests/benchmarks)
 - rm -f cabal.project.freeze
 - cabal new-build -w ${HC} --disable-tests --disable-benchmarks all
 # this builds all libraries and executables (including tests/benchmarks)
 # - rm -rf ./dist-newstyle

 # Build with installed constraints for packages in global-db
 - if $INSTALLED; then
     echo cabal new-build -w ${HC} --disable-tests --disable-benchmarks $(${HCPKG} list --global --simple-output --names-only | sed 's/\([a-zA-Z0-9-]\{1,\}\) */--constraint="\1 installed" /g') all | sh;
   else echo "Not building with installed constraints"; fi

 # build & run tests, build benchmarks
 - cabal new-build -w ${HC} ${TEST} ${BENCH} all
 - if [ "x$TEST" = "x--enable-tests" ]; then cabal new-test -w ${HC} ${TEST} all; fi

 # haddock
 - rm -rf ./dist-newstyle
 - if $HADDOCK; then cabal new-haddock -w ${HC} --disable-tests --disable-benchmarks all; else echo "Skipping haddock generation";fi

# REGENDATA ["MoodleGrader.cabal"]
# EOF

after_script:
- travis_retry curl -L https://github.com/rubik/stack-hpc-coveralls/releases/download/v0.0.4.0/shc-linux-x64-7.10.3.tar.bz2 | tar -xj
- ./shc csce-dfa-project-test spec
